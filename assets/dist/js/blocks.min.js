const {
  __: __$2
} = window.wp.i18n;
const {
  useState: useState$2,
  useEffect: useEffect$2,
  useCallback
} = window.wp.element;
const getComputedStyle = (selector, property, defaultValue) => {
  let elementStyle = {};
  if (typeof document === "object" && typeof document.querySelector === "function" && typeof window.getComputedStyle === "function") {
    const element = document.querySelector(selector);
    if (element) {
      elementStyle = window.getComputedStyle(element);
    }
  }
  return elementStyle[property] || defaultValue;
};
const elementOptions = {
  style: {
    base: {
      iconColor: "#666EE8",
      color: "#31325F",
      fontSize: getComputedStyle(".wc-block-checkout", "fontSize", "16px"),
      lineHeight: 1.375,
      // With a font-size of 16px, line-height will be 22px.
      "::placeholder": {
        color: "#fff"
      }
    }
  },
  classes: {
    focus: "focused",
    empty: "empty",
    invalid: "has-error"
  }
};
const useElementOptions = (overloadedOptions) => {
  const [isActive, setIsActive] = useState$2(false);
  const [isFocus, setIsFocus] = useState$2(false);
  const [options, setOptions] = useState$2({
    ...elementOptions,
    ...overloadedOptions
  });
  const [error, setError] = useState$2("");
  useEffect$2(() => {
    const color = isActive ? "#CFD7E0" : "#fff";
    setOptions((prevOptions) => {
      let showIcon;
      if (prevOptions.showIcon === false) {
        showIcon = {
          showIcon: false
        };
      } else if (typeof prevOptions.showIcon !== "undefined") {
        showIcon = {
          showIcon: isActive
        };
      } else {
        showIcon = {};
      }
      return {
        ...prevOptions,
        style: {
          ...prevOptions.style,
          base: {
            ...prevOptions.style.base,
            "::placeholder": {
              color
            }
          }
        },
        ...showIcon
      };
    });
  }, [isActive]);
  const onActive = useCallback((isEmpty, isFocus2) => {
    if (!isEmpty) {
      setIsActive(true);
    } else {
      setIsActive((prevActive) => !prevActive);
    }
    if (isFocus2) {
      setIsFocus(true);
    } else {
      setIsFocus(false);
    }
  }, [setIsActive, setIsFocus]);
  return {
    options,
    isActive,
    isFocus,
    onActive,
    error,
    setError
  };
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var dist = {};
var cnh = {};
var ValidationBRError$1 = {};
Object.defineProperty(ValidationBRError$1, "__esModule", { value: true });
class ValidationBRError extends Error {
}
ValidationBRError.INVALID_DV = new ValidationBRError("Dígito verificador inválido");
ValidationBRError.EMPTY_VALUE = new ValidationBRError("Valor não preenchido");
ValidationBRError.MAX_LEN_EXCEDEED = new ValidationBRError("Número de caracteres excedido");
ValidationBRError.REPEATED_SEQUENCE = new ValidationBRError("Sequência de números repetidos não permitida");
ValidationBRError$1.default = ValidationBRError;
var utils = {};
var __importDefault$1 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(utils, "__esModule", { value: true });
utils.sumToDV = sumToDV;
utils.checkRepeatedSequence = checkRepeatedSequence;
utils.sumElementsByMultipliers = sumElementsByMultipliers;
utils.fakeNumber = fakeNumber;
utils.clearValue = clearValue;
utils.insertAtPosition = insertAtPosition;
utils.removeFromPosition = removeFromPosition;
utils.applyMask = applyMask;
utils.randomLetter = randomLetter;
const ValidationBRError_1$1 = __importDefault$1(ValidationBRError$1);
function sumToDV(sum) {
  return sum % 11 < 2 ? 0 : 11 - sum % 11;
}
function checkRepeatedSequence(value) {
  return [...value].every((digit) => digit === value[0]);
}
function sumElementsByMultipliers(value, multiplier) {
  return multiplier.reduce((accu, curr, i) => accu + curr * Number(value[i]), 0);
}
function fakeNumber(length, forceLength = false, isAlpha = false) {
  let value;
  if (isAlpha)
    value = Math.round(Math.random() * 36 ** length).toString(36).toLocaleUpperCase();
  else
    value = Math.floor(Math.random() * 10 ** length).toString();
  if (forceLength)
    return String(value).padStart(length, "0");
  return String(value);
}
function clearValue(value, length = null, options) {
  let clearedValue = String(value).replace(/([/.-]+)/gi, "");
  if (options) {
    const shouldRejectEmpty = options.rejectEmpty === true && clearedValue.length === 0;
    if (shouldRejectEmpty) {
      throw ValidationBRError_1$1.default.EMPTY_VALUE;
    }
    const shouldRejectHigherLength = options.rejectHigherLength === true && length && clearedValue.length > length;
    if (shouldRejectHigherLength) {
      throw ValidationBRError_1$1.default.MAX_LEN_EXCEDEED;
    }
    const shouldRejectEqualSequence = options.rejectEqualSequence === true && length;
    if (shouldRejectEqualSequence) {
      if (checkRepeatedSequence(clearedValue))
        throw ValidationBRError_1$1.default.REPEATED_SEQUENCE;
    }
    if (length && options.fillZerosAtLeft)
      clearedValue = clearedValue.padStart(length, "0");
    if (length && options.trimAtRight)
      clearedValue = clearedValue.substring(0, length);
  }
  return clearedValue;
}
function insertAtPosition(value, insertValue, position) {
  return `${value.substring(0, position)}${insertValue}${value.substring(position)}`;
}
function removeFromPosition(value, startPosition, endPosition) {
  return [value.slice(0, startPosition), value.slice(endPosition)].join("");
}
function applyMask(value, mask2) {
  const maskLen = clearValue(mask2).length;
  let masked = clearValue(value, maskLen, { fillZerosAtLeft: true, trimAtRight: true });
  const specialChars = ["/", "-", ".", "(", ")", " "];
  for (let position = 0; position < mask2.length; position += 1) {
    const current = mask2[position];
    if (specialChars.includes(current))
      masked = insertAtPosition(masked, current, position);
  }
  return masked;
}
function randomLetter() {
  const idx = Math.floor(1 + Math.random() * 26);
  return String.fromCharCode(idx + 64);
}
(function(exports) {
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fake = exports.mask = exports.validate = exports.validateOrFail = exports.dv = void 0;
  const ValidationBRError_12 = __importDefault2(ValidationBRError$1);
  const utils_12 = utils;
  const dv2 = (value) => {
    const cnh2 = (0, utils_12.clearValue)(value, 9, {
      trimAtRight: true,
      rejectEmpty: true
    });
    const sum1 = (0, utils_12.sumElementsByMultipliers)(cnh2.substring(0, 9), [2, 3, 4, 5, 6, 7, 8, 9, 10]);
    const dv1 = (0, utils_12.sumToDV)(sum1);
    const sum2 = (0, utils_12.sumElementsByMultipliers)(cnh2.substring(0, 9) + dv1, [3, 4, 5, 6, 7, 8, 9, 10, 11, 2]);
    const dv22 = (0, utils_12.sumToDV)(sum2);
    return `${dv1}${dv22}`;
  };
  exports.dv = dv2;
  const validateOrFail2 = (value) => {
    const cnh2 = (0, utils_12.clearValue)(value, 11, {
      fillZerosAtLeft: true,
      rejectEmpty: true,
      rejectHigherLength: true,
      rejectEqualSequence: true
    });
    if ((0, exports.dv)(cnh2) !== cnh2.substring(9, 11)) {
      throw ValidationBRError_12.default.INVALID_DV;
    }
    return true;
  };
  exports.validateOrFail = validateOrFail2;
  const validate2 = (value) => {
    try {
      return (0, exports.validateOrFail)(value);
    } catch (error) {
      return false;
    }
  };
  exports.validate = validate2;
  const mask2 = (value) => (0, utils_12.applyMask)(value, "000000000-00");
  exports.mask = mask2;
  const fake2 = (withMask = false) => {
    const value = (0, utils_12.fakeNumber)(9, true);
    const cnh2 = `${value}${(0, exports.dv)(value)}`;
    if (withMask)
      return (0, exports.mask)(cnh2);
    return cnh2;
  };
  exports.fake = fake2;
  exports.default = exports.validate;
})(cnh);
var cnpj = {};
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(cnpj, "__esModule", { value: true });
cnpj.dv = dv;
cnpj.mask = mask;
cnpj.fake = fake;
cnpj.validateOrFail = validateOrFail;
cnpj.validate = validate;
const ValidationBRError_1 = __importDefault(ValidationBRError$1);
const utils_1 = utils;
function dv(value) {
  const cnpj2 = (0, utils_1.clearValue)(value, 12, {
    trimAtRight: true,
    rejectEmpty: true
  });
  const dv1Factors = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
  const dv1 = sumToDvWithAlpha(cnpj2.substring(0, 12), dv1Factors);
  const dv2Factors = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
  const dv2 = sumToDvWithAlpha(cnpj2.substring(0, 12) + dv1, dv2Factors);
  return `${dv1}${dv2}`;
}
function mask(value) {
  return (0, utils_1.applyMask)(value, "00.000.000/0000-00");
}
function fake(input = false) {
  const options = typeof input === "boolean" ? { withMask: input, alphanumeric: true } : { withMask: false, alphanumeric: true, ...input };
  const num = (0, utils_1.fakeNumber)(12, true, options.alphanumeric);
  const cnpj2 = `${num}${dv(num)}`;
  if (options.withMask)
    return mask(cnpj2);
  return cnpj2;
}
function validateOrFail(value) {
  const cnpj2 = (0, utils_1.clearValue)(value, 14, {
    fillZerosAtLeft: false,
    rejectEmpty: true,
    rejectHigherLength: true,
    rejectEqualSequence: true
  });
  if (dv(cnpj2) !== cnpj2.substring(12, 14)) {
    throw ValidationBRError_1.default.INVALID_DV;
  }
  return true;
}
function validate(value) {
  try {
    return validateOrFail(value);
  } catch (error) {
    return false;
  }
}
cnpj.default = validate;
function asciiTableConverter(character) {
  if (/^\d$/.test(character))
    return +character;
  const ascii = character.toLocaleUpperCase().charCodeAt(0) - 48;
  return ascii;
}
function sumToDvWithAlpha(value, multiplier) {
  const sum = [...value].map((character) => asciiTableConverter(character)).reduce((sum2, asciiChar, index) => sum2 + asciiChar * multiplier[index], 0);
  return (0, utils_1.sumToDV)(sum);
}
var cpf = {};
(function(exports) {
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;
  const ValidationBRError_12 = __importDefault2(ValidationBRError$1);
  const utils_12 = utils;
  const dv2 = (value) => {
    const cpf2 = (0, utils_12.clearValue)(value, 9, {
      trimAtRight: true,
      rejectEmpty: true
    });
    const sum1 = (0, utils_12.sumElementsByMultipliers)(cpf2, [10, 9, 8, 7, 6, 5, 4, 3, 2]);
    const dv1 = (0, utils_12.sumToDV)(sum1);
    const sum2 = (0, utils_12.sumElementsByMultipliers)(cpf2 + dv1, [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]);
    const dv22 = (0, utils_12.sumToDV)(sum2);
    return `${dv1}${dv22}`;
  };
  exports.dv = dv2;
  const mask2 = (value) => (0, utils_12.applyMask)(value, "000.000.000-00");
  exports.mask = mask2;
  const fake2 = (withMask = false) => {
    const num = (0, utils_12.fakeNumber)(9, true);
    const cpf2 = `${num}${(0, exports.dv)(num)}`;
    if (withMask)
      return (0, exports.mask)(cpf2);
    return cpf2;
  };
  exports.fake = fake2;
  const validateOrFail2 = (value) => {
    const cpf2 = (0, utils_12.clearValue)(value, 11, {
      fillZerosAtLeft: true,
      rejectEmpty: true,
      rejectHigherLength: true,
      rejectEqualSequence: true
    });
    if ((0, exports.dv)(cpf2) !== cpf2.substring(9, 11)) {
      throw ValidationBRError_12.default.INVALID_DV;
    }
    return true;
  };
  exports.validateOrFail = validateOrFail2;
  const validate2 = (value) => {
    try {
      return (0, exports.validateOrFail)(value);
    } catch (error) {
      return false;
    }
  };
  exports.validate = validate2;
  exports.default = exports.validate;
})(cpf);
var judicialProcess = {};
(function(exports) {
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;
  exports._getSubCourt = _getSubCourt;
  const ValidationBRError_12 = __importDefault2(ValidationBRError$1);
  const utils_12 = utils;
  const dv2 = (value) => {
    const judicialProcess2 = (0, utils_12.clearValue)(value, 18, { trimAtRight: true, rejectEmpty: true });
    const num = judicialProcess2.substring(0, 7);
    const yearAndCourt = judicialProcess2.substring(7, 14);
    const origin = judicialProcess2.substring(14, 18);
    return String(98 - Number(`${Number(`${Number(num) % 97}${yearAndCourt}`) % 97}${origin}00`) % 97).padStart(2, "0");
  };
  exports.dv = dv2;
  const mask2 = (value) => (0, utils_12.applyMask)(value, "0000000-00.0000.0.00.0000");
  exports.mask = mask2;
  const fake2 = (withMask = false) => {
    const num = (0, utils_12.fakeNumber)(7, true);
    const year = (/* @__PURE__ */ new Date()).getFullYear() - +(0, utils_12.fakeNumber)(1);
    let courte1 = (0, utils_12.fakeNumber)(1, true);
    courte1 = courte1 === "0" ? "1" : courte1;
    const courte2 = _getSubCourt();
    const courte = `${courte1}${courte2}`;
    const origin = (0, utils_12.fakeNumber)(4, true);
    const judicialProcess2 = `${num}${year}${courte}${origin}`;
    const digits = (0, exports.dv)(judicialProcess2);
    const finalNumber = (0, utils_12.insertAtPosition)(judicialProcess2, digits, 7);
    if (withMask)
      return (0, exports.mask)(finalNumber);
    return finalNumber;
  };
  exports.fake = fake2;
  const validateOrFail2 = (value) => {
    const judicialProcess2 = (0, utils_12.clearValue)(value, 20, {
      fillZerosAtLeft: true,
      rejectEmpty: true,
      rejectHigherLength: true
    });
    const processWithoutDV = (0, utils_12.removeFromPosition)(judicialProcess2, 7, 9);
    if (processWithoutDV.substring(11, 12) === "0") {
      throw new Error('Código do Órgão Judiciário não pode ser "0"');
    }
    if ((0, exports.dv)(processWithoutDV) !== judicialProcess2.substring(7, 9)) {
      throw ValidationBRError_12.default.INVALID_DV;
    }
    return true;
  };
  exports.validateOrFail = validateOrFail2;
  const validate2 = (value) => {
    try {
      return (0, exports.validateOrFail)(value);
    } catch (error) {
      return false;
    }
  };
  exports.validate = validate2;
  function _getSubCourt(courte = void 0) {
    courte = courte !== null && courte !== void 0 ? courte : (0, utils_12.fakeNumber)(2, true).toString();
    return +courte === 0 ? "01" : courte;
  }
  exports.default = exports.validate;
})(judicialProcess);
var nup17 = {};
(function(exports) {
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;
  const ValidationBRError_12 = __importDefault2(ValidationBRError$1);
  const utils_12 = utils;
  const dv2 = (value) => {
    const nup = (0, utils_12.clearValue)(value, 15, { rejectEmpty: true, trimAtRight: true });
    const nupReverse = nup.split("").reverse().join("");
    const sum1 = (0, utils_12.sumElementsByMultipliers)(nupReverse, [...Array(15)].map((_, i) => i + 2));
    const dv1 = _specificSumToDV(sum1);
    const sum2 = (0, utils_12.sumElementsByMultipliers)(dv1 + nupReverse, [...Array(16)].map((_, i) => i + 2));
    const dv22 = _specificSumToDV(sum2);
    return `${dv1}${dv22}`;
  };
  exports.dv = dv2;
  const mask2 = (value) => (0, utils_12.applyMask)(value, "00000.000000/0000-00");
  exports.mask = mask2;
  const fake2 = (withMask = false) => {
    const num = (0, utils_12.fakeNumber)(15, true);
    const nup = `${num}${(0, exports.dv)(String(num))}`;
    if (withMask)
      return (0, exports.mask)(nup);
    return nup;
  };
  exports.fake = fake2;
  const validateOrFail2 = (value) => {
    const nup = (0, utils_12.clearValue)(value, 17, {
      rejectEmpty: true,
      rejectHigherLength: true
    });
    if ((0, exports.dv)(nup) !== nup.substring(15, 17)) {
      throw ValidationBRError_12.default.INVALID_DV;
    }
    return true;
  };
  exports.validateOrFail = validateOrFail2;
  const validate2 = (value) => {
    try {
      return (0, exports.validateOrFail)(value);
    } catch (error) {
      return false;
    }
  };
  exports.validate = validate2;
  exports.default = exports.validate;
  function _specificSumToDV(sum) {
    const rest = 11 - sum % 11;
    const exceptions = [
      { rest: 11, dv: 1 },
      { rest: 10, dv: 0 }
    ];
    const inExceptions = exceptions.find((item) => item.rest === rest);
    return !inExceptions ? rest : inExceptions.dv;
  }
})(nup17);
var pisPasep = {};
(function(exports) {
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;
  const ValidationBRError_12 = __importDefault2(ValidationBRError$1);
  const utils_12 = utils;
  const dv2 = (value) => {
    const pis = (0, utils_12.clearValue)(value, 10, {
      trimAtRight: true,
      rejectEmpty: true
    });
    const sum = (0, utils_12.sumElementsByMultipliers)(pis, [3, 2, 9, 8, 7, 6, 5, 4, 3, 2]);
    return String((0, utils_12.sumToDV)(sum));
  };
  exports.dv = dv2;
  const mask2 = (value) => (0, utils_12.applyMask)(value, "000.00000.00-0");
  exports.mask = mask2;
  const fake2 = (withMask = false) => {
    const num = (0, utils_12.fakeNumber)(10, true);
    const pis = `${num}${(0, exports.dv)(num)}`;
    if (withMask)
      return (0, exports.mask)(pis);
    return pis;
  };
  exports.fake = fake2;
  const validateOrFail2 = (value) => {
    const pis = (0, utils_12.clearValue)(value, 11, {
      fillZerosAtLeft: true,
      rejectEmpty: true,
      rejectHigherLength: true,
      rejectEqualSequence: true
    });
    if ((0, exports.dv)(pis) !== pis.substring(10, 11)) {
      throw ValidationBRError_12.default.INVALID_DV;
    }
    return true;
  };
  exports.validateOrFail = validateOrFail2;
  const validate2 = (value) => {
    try {
      return (0, exports.validateOrFail)(value);
    } catch (error) {
      return false;
    }
  };
  exports.validate = validate2;
  exports.default = exports.validate;
})(pisPasep);
var postalCode = {};
(function(exports) {
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;
  const ValidationBRError_12 = __importDefault2(ValidationBRError$1);
  const utils_12 = utils;
  const dv2 = (value) => {
    if (!value)
      throw ValidationBRError_12.default.EMPTY_VALUE;
    const postalCode2 = String(value).replace(/[^0-9]+/gi, "").padStart(8, "0").substring(0, 8);
    const sum = (0, utils_12.sumElementsByMultipliers)(postalCode2, [8, 6, 4, 2, 3, 5, 9, 7]);
    const rest = sum % 11;
    const specificities = [
      { rest: 0, dv: 5 },
      { rest: 1, dv: 0 }
    ];
    const specifity = specificities.find((item) => item.rest === rest);
    const DV = specifity ? specifity.dv : 11 - rest;
    return String(DV);
  };
  exports.dv = dv2;
  const mask2 = (value) => String(value).toLocaleUpperCase();
  exports.mask = mask2;
  const fake2 = (withMask = false) => {
    const num = (0, utils_12.fakeNumber)(8, true);
    const postalCode2 = `${(0, utils_12.randomLetter)()}${(0, utils_12.randomLetter)()}${num}${(0, exports.dv)(num)}BR`;
    if (withMask)
      return (0, exports.mask)(postalCode2);
    return postalCode2;
  };
  exports.fake = fake2;
  const validateOrFail2 = (value) => {
    if (!/^[a-z]{2}([\d]{9})[a-z]{2}$/gi.test(String(value))) {
      throw new Error('O número não está no formato "XX000000000XX"');
    }
    const postalCode2 = (0, utils_12.clearValue)(value.substring(2, 11), 9);
    if ((0, exports.dv)(value.substring(2, 11)) !== postalCode2.substring(8, 9)) {
      throw ValidationBRError_12.default.INVALID_DV;
    }
    return true;
  };
  exports.validateOrFail = validateOrFail2;
  const validate2 = (value) => {
    try {
      return (0, exports.validateOrFail)(value);
    } catch (error) {
      return false;
    }
  };
  exports.validate = validate2;
  exports.default = exports.validate;
})(postalCode);
var renavam = {};
(function(exports) {
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;
  const ValidationBRError_12 = __importDefault2(ValidationBRError$1);
  const utils_12 = utils;
  const dv2 = (value) => {
    const renavam2 = (0, utils_12.clearValue)(value, 10, {
      fillZerosAtLeft: true,
      trimAtRight: true,
      rejectEmpty: true
    });
    const sum1 = (0, utils_12.sumElementsByMultipliers)(renavam2, [3, 2, 9, 8, 7, 6, 5, 4, 3, 2]) * 10;
    const dv1 = sum1 % 11 >= 10 ? 0 : sum1 % 11;
    return `${dv1}`;
  };
  exports.dv = dv2;
  const mask2 = (value) => (0, utils_12.applyMask)(value, "0000000000-0");
  exports.mask = mask2;
  const fake2 = (withMask = false) => {
    const value = (0, utils_12.fakeNumber)(10, true);
    const renavam2 = `${value}${(0, exports.dv)(value)}`;
    if (withMask)
      return (0, exports.mask)(renavam2);
    return renavam2;
  };
  exports.fake = fake2;
  const validateOrFail2 = (value) => {
    const renavam2 = (0, utils_12.clearValue)(value, 11, {
      fillZerosAtLeft: true,
      rejectEmpty: true,
      rejectHigherLength: true,
      rejectEqualSequence: true
    });
    if ((0, exports.dv)(renavam2) !== renavam2.substring(10, 11)) {
      throw ValidationBRError_12.default.INVALID_DV;
    }
    return true;
  };
  exports.validateOrFail = validateOrFail2;
  const validate2 = (value) => {
    try {
      return (0, exports.validateOrFail)(value);
    } catch (error) {
      return false;
    }
  };
  exports.validate = validate2;
  exports.default = exports.validate;
})(renavam);
var tituloEleitor = {};
(function(exports) {
  var __importDefault2 = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.validate = exports.validateOrFail = exports.fake = exports.mask = exports.dv = void 0;
  const ValidationBRError_12 = __importDefault2(ValidationBRError$1);
  const utils_12 = utils;
  const dv2 = (value) => {
    const titulo = (0, utils_12.clearValue)(value, 10, {
      fillZerosAtLeft: true,
      trimAtRight: true,
      rejectEmpty: true
    });
    const sum1 = (0, utils_12.sumElementsByMultipliers)(titulo.substring(0, 8), [2, 3, 4, 5, 6, 7, 8, 9]);
    const dv1 = sum1 % 11 >= 10 ? 0 : sum1 % 11;
    const sum2 = (0, utils_12.sumElementsByMultipliers)(titulo.substring(8, 10) + dv1, [7, 8, 9]);
    const dv22 = sum2 % 11 >= 10 ? 0 : sum2 % 11;
    return `${dv1}${dv22}`;
  };
  exports.dv = dv2;
  const mask2 = (value) => (0, utils_12.applyMask)(value, "0000.0000.0000");
  exports.mask = mask2;
  const fake2 = (withMask = false) => {
    const num = (0, utils_12.fakeNumber)(8, true);
    const uf = (Math.random() * 27 + 1).toFixed(0).padStart(2, "0");
    const titulo = `${num}${uf}${(0, exports.dv)(num + uf)}`;
    if (withMask)
      return (0, exports.mask)(titulo);
    return titulo;
  };
  exports.fake = fake2;
  const validateOrFail2 = (value) => {
    const titulo = (0, utils_12.clearValue)(value, 12, {
      fillZerosAtLeft: true,
      rejectEmpty: true,
      rejectHigherLength: true,
      rejectEqualSequence: true
    });
    if ((0, exports.dv)(titulo) !== titulo.substring(10, 12)) {
      throw ValidationBRError_12.default.INVALID_DV;
    }
    return true;
  };
  exports.validateOrFail = validateOrFail2;
  const validate2 = (value) => {
    try {
      return (0, exports.validateOrFail)(value);
    } catch (error) {
      return false;
    }
  };
  exports.validate = validate2;
  exports.default = exports.validate;
})(tituloEleitor);
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isNUP17 = exports.isTituloEleitor = exports.isRenavam = exports.isPostalCode = exports.isPIS = exports.isJudicialProcess = exports.isCPF = exports.isCNPJ = exports.isCNH = void 0;
  const cnh_1 = cnh;
  const cnpj_1 = cnpj;
  const cpf_1 = cpf;
  const judicialProcess_1 = judicialProcess;
  const nup17_1 = nup17;
  const pisPasep_1 = pisPasep;
  const postalCode_1 = postalCode;
  const renavam_1 = renavam;
  const tituloEleitor_1 = tituloEleitor;
  const isCNH = (value) => (0, cnh_1.validate)(value);
  exports.isCNH = isCNH;
  const isCNPJ = (value) => (0, cnpj_1.validate)(value);
  exports.isCNPJ = isCNPJ;
  const isCPF = (value) => (0, cpf_1.validate)(value);
  exports.isCPF = isCPF;
  const isJudicialProcess = (value) => (0, judicialProcess_1.validate)(value);
  exports.isJudicialProcess = isJudicialProcess;
  const isPIS = (value) => (0, pisPasep_1.validate)(value);
  exports.isPIS = isPIS;
  const isPostalCode = (value) => (0, postalCode_1.validate)(value);
  exports.isPostalCode = isPostalCode;
  const isRenavam = (value) => (0, renavam_1.validate)(value);
  exports.isRenavam = isRenavam;
  const isTituloEleitor = (value) => (0, tituloEleitor_1.validate)(value);
  exports.isTituloEleitor = isTituloEleitor;
  const isNUP17 = (value) => (0, nup17_1.validate)(value);
  exports.isNUP17 = isNUP17;
  exports.default = {
    isCNH: exports.isCNH,
    isCNPJ: exports.isCNPJ,
    isCPF: exports.isCPF,
    isJudicialProcess: exports.isJudicialProcess,
    isPIS: exports.isPIS,
    isPostalCode: exports.isPostalCode,
    isRenavam: exports.isRenavam,
    isTituloEleitor: exports.isTituloEleitor,
    isNUP17: exports.isNUP17
  };
})(dist);
const {
  __: __$1
} = window.wp.i18n;
const {
  useState: useState$1,
  useEffect: useEffect$1
} = window.wp.element;
const baseTextInputStyles = "wc-block-gateway-input paghiper_tax_id p-Input-input Input p-Input-input--textRight";
const InlineTaxIdField = ({
  inputErrorComponent: ValidationInputError2,
  onChange,
  gatewayName
}) => {
  const [isEmpty, setIsEmpty] = useState$1(true);
  const [isInvalid, setIsInvalid] = useState$1(false);
  const [isComplete, setIsComplete] = useState$1(false);
  const [fieldLabel, setFieldLabel] = useState$1(__$1("CPF do Pagador", "woo-boleto-paghiper"));
  const [fieldInput, setFieldInput] = useState$1("");
  const {
    isActive,
    isFocus,
    onActive,
    error,
    setError
  } = useElementOptions({
    hideIcon: true
  });
  const errorCallback = (event) => {
    if (event.error) {
      setError(event.error.message);
    } else {
      setError("");
    }
    setIsEmpty(event.empty);
    onChange(event);
    if (!event.target.value) {
      setIsEmpty(true);
    }
  };
  useEffect$1(() => {
    if (fieldInput.replace(/\D/g, "").length > 11) {
      setFieldLabel(__$1("CNPJ do Pagador", "woo-boleto-paghiper"));
    } else {
      setFieldLabel(__$1("CPF do Pagador", "woo-boleto-paghiper"));
    }
    if (!isEmpty) {
      if (!isFocus) {
        if (fieldInput.replace(/\D/g, "").length > 11 && fieldInput.replace(/\D/g, "").length < 14) {
          setError(__$1("O número do seu CNPJ está incompleto.", "woo-boleto-paghiper"));
          setIsInvalid(true);
        } else if (fieldInput.replace(/\D/g, "").length < 11) {
          setError(__$1("O número do seu CPF está incompleto.", "woo-boleto-paghiper"));
          setIsInvalid(true);
        }
      } else {
        if (fieldInput.replace(/\D/g, "").length == 11) {
          if (!dist.isCPF(fieldInput)) {
            setError(__$1("O número do seu CPF não está correto.", "woo-boleto-paghiper"));
            setIsInvalid(true);
          } else {
            setIsComplete(true);
          }
        } else if (fieldInput.replace(/\D/g, "").length == 14) {
          if (!dist.isCNPJ(fieldInput)) {
            setError(__$1("O número do seu CNPJ não está correto.", "woo-boleto-paghiper"));
            setIsInvalid(true);
          } else {
            setIsComplete(true);
          }
        }
      }
    } else {
      setIsInvalid(false);
      setIsComplete(false);
    }
  }, [fieldInput, isFocus]);
  useEffect$1(() => {
    setIsInvalid(false);
    setIsComplete(false);
    setError("");
  }, [fieldInput]);
  const taxIdMaskBehavior = (val, e) => {
    return val.replace(/\D/g, "").length > 11 ? "00.000.000/0000-00" : "000.000.000-009";
  };
  useEffect$1(() => {
    if (typeof jQuery(".paghiper_tax_id").mask === "function") {
      jQuery(".paghiper_tax_id").mask(taxIdMaskBehavior, {
        onKeyPress: function(val, e, field, options2) {
          field.mask(taxIdMaskBehavior.apply({}, arguments), options2);
        }
      });
    } else {
      console.log("Paghiper block failed to initialize TaxID mask");
    }
  }, []);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
    className: "wc-block-components-form"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "wc-block-gateway-container wc-block-components-text-input wc-inline-tax-id-element paghiper-taxid-fieldset" + (isActive || !isEmpty ? " is-active" : "")
  }, /* @__PURE__ */ React.createElement("input", {
    type: "text",
    id: "wc-paghiper-inline-tax-id-element",
    name: "_" + gatewayName + "_cpf_cnpj",
    className: baseTextInputStyles + (isEmpty ? " empty Input--empty" : "") + (isInvalid ? " invalid" : "") + (isComplete ? " valid" : ""),
    onBlur: () => onActive(isEmpty, false),
    onFocus: () => onActive(isEmpty, true),
    onChange: errorCallback,
    onInput: (e) => setFieldInput(e.target.value),
    "aria-label": fieldLabel,
    required: true,
    title: true
  }), /* @__PURE__ */ React.createElement("label", {
    htmlFor: "wc-paghiper-inline-tax-id-element"
  }, fieldLabel), /* @__PURE__ */ React.createElement(ValidationInputError2, {
    errorMessage: error
  }))));
};
const {
  __
} = window.wp.i18n;
const {
  useState,
  useEffect
} = window.wp.element;
const {
  decodeEntities
} = window.wp.htmlEntities;
const {
  registerPaymentMethod
} = window.wc.wcBlocksRegistry;
const {
  ValidationInputError
} = window.wc.blocksCheckout;
const {
  getSetting
} = window.wc.wcSettings;
const pixSettings = getSetting("paghiper_pix_data", {});
const defaultPixLabel = __("PIX Paghiper", "woo-boleto-paghiper");
const label = decodeEntities(pixSettings.title) || defaultPixLabel;
const Content = (props) => {
  if (typeof wc === "undefined" || !wc.wcBlocksRegistry) {
    console.error("WooCommerce Blocks registry not found. Make sure WooCommerce Blocks is active and loaded.");
    return null;
  }
  if (typeof wc === "undefined" || !wc.blocksCheckout) {
    console.error("WooCommerce Blocks Checkout not found. Make sure WooCommerce Blocks is active and loaded.");
    return null;
  }
  const {
    eventRegistration,
    emitResponse
  } = props;
  const {
    onPaymentSetup
  } = eventRegistration;
  const [taxID, setTaxID] = useState("");
  const [payerName, setPayerName] = useState("");
  useEffect(() => {
    const unsubscribe = onPaymentSetup(async () => {
      const paghiperTaxId = taxID;
      const paghiperTaxIdIsValid = !!paghiperTaxId.length;
      const paghiperTaxIdFieldName = "_" + props.gatewayName + "_cpf_cnpj";
      if (paghiperTaxIdIsValid) {
        return {
          type: emitResponse.responseTypes.SUCCESS,
          meta: {
            paymentMethodData: {
              [paghiperTaxIdFieldName]: paghiperTaxId
            }
          }
        };
      }
      return {
        type: emitResponse.responseTypes.ERROR,
        message: "There was an error"
      };
    });
    return () => {
      unsubscribe();
    };
  }, [taxID, emitResponse.responseTypes.ERROR, emitResponse.responseTypes.SUCCESS, onPaymentSetup]);
  const onChange = (paymentEvent) => {
    if (paymentEvent.error) {
      console.log("Paghiper: Payment Error");
    }
    setTaxID(paymentEvent.target.value.replace(/\D/g, ""));
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, decodeEntities(props.gatewayDescription || ""), /* @__PURE__ */ React.createElement(InlineTaxIdField, {
    gatewayName: props.gatewayName,
    onChange,
    inputErrorComponent: ValidationInputError
  }));
};
const Label = (props) => {
  const {
    PaymentMethodLabel
  } = props.components;
  return /* @__PURE__ */ React.createElement(PaymentMethodLabel, {
    text: label
  });
};
const PaghiperPix = {
  name: "paghiper_pix",
  label: /* @__PURE__ */ React.createElement(Label, null),
  content: /* @__PURE__ */ React.createElement(Content, {
    gatewayName: "paghiper_pix",
    gatewayDescription: pixSettings.description
  }),
  edit: /* @__PURE__ */ React.createElement(Content, {
    gatewayName: "paghiper_pix",
    gatewayDescription: pixSettings.description
  }),
  canMakePayment: () => true,
  ariaLabel: label,
  paymentMethodId: "paghiper_pix",
  supports: {
    features: pixSettings.supports
  }
};
const billetSettings = getSetting("paghiper_billet_data", {});
const defaultBilletLabel = __("Boleto Paghiper", "woo-boleto-paghiper");
const billetLabel = decodeEntities(billetSettings.title) || defaultBilletLabel;
const BilletLabel = (props) => {
  const {
    PaymentMethodLabel
  } = props.components;
  return /* @__PURE__ */ React.createElement(PaymentMethodLabel, {
    text: billetLabel
  });
};
const PaghiperBillet = {
  name: "paghiper_billet",
  label: /* @__PURE__ */ React.createElement(BilletLabel, null),
  content: /* @__PURE__ */ React.createElement(Content, {
    gatewayName: "paghiper_billet",
    gatewayDescription: billetSettings.description
  }),
  edit: /* @__PURE__ */ React.createElement(Content, {
    gatewayName: "paghiper_billet",
    gatewayDescription: billetSettings.description
  }),
  canMakePayment: () => true,
  ariaLabel: billetLabel,
  supports: {
    features: billetSettings.supports
  }
};
if (typeof window.wc.wcBlocksRegistry !== "undefined") {
  registerPaymentMethod(PaghiperPix);
  registerPaymentMethod(PaghiperBillet);
}
//# sourceMappingURL=blocks.min.js.map
