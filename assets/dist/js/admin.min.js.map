{"version":3,"file":"admin.min.js","sources":["../../src/js/interface/admin.js"],"sourcesContent":["jQuery(function ($) {\n    'use strict';\n\n    // --- ELEMENTOS E INPUTS HIDDEN ---\n    const container = $('#paghiper-due-date-container');\n    if (!container.length) return;\n\n    const modeToggle = $('#due-date-mode-toggle');\n    const daysSection = $('#days-mode-section');\n    const minutesSection = $('#minutes-mode-section');\n\n    // Classe para gerenciar a animação de um único dígito do odômetro\n    /*class OdometerDigit {\n        constructor(initialValue) {\n            this.element = $('<div class=\"odometer-digit\">');\n            this.currentValue = parseInt(initialValue, 10);\n            \n            // O \"rotor\" que contém os números de 0 a 9\n            this.rotor = $('<div class=\"odometer-rotor\">');\n            for (let i = 0; i < 10; i++) {\n                this.rotor.append($('<div class=\"odometer-digit-value\">').text(i));\n            }\n            // Adicionamos uma cópia do 0 no final para a animação de 9 -> 0\n            this.rotor.append($('<div class=\"odometer-digit-value\">').text(0));\n\n            this.element.append(this.rotor);\n        }\n\n        initializePosition() {\n            const digitHeight = this.element.height();\n            if (digitHeight === 0) return;\n            // Define a posição inicial sem animação\n            this.rotor.css({ transition: 'none', transform: `translateY(-${this.currentValue * digitHeight}px)` });\n        }\n\n        setValue(newValue, direction) {\n            if (newValue === this.currentValue) return;\n\n            // Mede a altura a cada clique para garantir resiliência a mudanças de layout\n            const digitHeight = this.element.height();\n            if (digitHeight === 0) return; // Não anima se não tiver altura\n\n            const rotor = this.rotor;\n            const currentValue = this.currentValue;\n\n            // Garante que a transição está ativa para a animação\n            rotor.css({ transition: 'transform 0.4s ease-in-out' });\n\n            // Se a animação \"passar pelo zero\" (ex: 9 -> 0 ou 0 -> 9), faz um tratamento especial\n            if (direction > 0 && newValue < currentValue) { // Rolando para cima, ex: de 9 para 0\n                // Move para a posição \"10\" (que é a cópia do 0)\n                rotor.css({ transform: `translateY(-${10 * digitHeight}px)` });\n                // Após a animação, reseta para a posição 0 sem animar\n                setTimeout(() => {\n                    rotor.css({ transition: 'none', transform: `translateY(0px)` });\n                }, 400);\n            } else if (direction < 0 && newValue > currentValue) { // Rolando para baixo, ex: de 0 para 9\n                // Para animar de 0 para 9 para baixo, primeiro movemos o rotor para a posição 10 (o 0 de baixo) sem animar\n                rotor.css({ transition: 'none', transform: `translateY(-${10 * digitHeight}px)` });\n                // Força o navegador a redesenhar para aplicar o estado inicial\n                rotor[0].offsetHeight;\n                // Agora, com a transição, movemos para a posição 9\n                rotor.css({ transition: 'transform 0.4s ease-in-out', transform: `translateY(-${9 * digitHeight}px)` });\n            } else {\n                // Animação normal\n                rotor.css({ transform: `translateY(-${newValue * digitHeight}px)` });\n            }\n\n            this.currentValue = newValue;\n        }\n    }*/\n\n    // Classe para gerenciar a animação de um único dígito do odômetro\n    class OdometerDigit {\n        constructor(initialValue) {\n            this.element = $('<div class=\"odometer-digit\">');\n            this.currentValue = parseInt(initialValue, 10);\n            \n            // O \"rotor\" que contém os números de 0 a 9\n            this.rotor = $('<div class=\"odometer-rotor\">');\n            for (let i = 0; i < 10; i++) {\n                this.rotor.append($('<div class=\"odometer-digit-value\">').text(i));\n            }\n            // Adicionamos uma cópia do 0 no final para a animação de 9 -> 0\n            this.rotor.append($('<div class=\"odometer-digit-value\">').text(0));\n\n            this.element.append(this.rotor);\n        }\n\n        initializePosition() {\n            const digitHeight = this.element.height();\n            if (digitHeight === 0) return;\n            // Define a posição inicial sem animação\n            this.rotor.css({ transition: 'none', transform: `translateY(-${this.currentValue * digitHeight}px)` });\n        }\n\n        // Aceita o flag 'wrapped' para tratar a animação de virada\n        setValue(newValue, direction, wrapped = false) {\n            if (newValue === this.currentValue) return;\n\n            const digitHeight = this.element.height();\n            if (digitHeight === 0) return;\n\n            const rotor = this.rotor;\n            rotor.css({ transition: 'transform 0.4s ease-in-out' });\n\n            // A lógica de virada para cima (9 -> 0) funciona bem quando o flag 'wrapped' é verdadeiro\n            if (wrapped && direction > 0) { \n                rotor.css({ transform: `translateY(-${10 * digitHeight}px)` });\n                setTimeout(() => {\n                    rotor.css({ transition: 'none', transform: `translateY(0px)` });\n                }, 400);\n            } else {\n                // Para todos os outros casos, incluindo a virada para baixo (0 -> 9),\n                // fazemos a animação normal para o novo valor.\n                // Isso corrige o bug de estado, garantindo que o número correto seja sempre exibido.\n                rotor.css({ transform: `translateY(-${newValue * digitHeight}px)` });\n            }\n\n            this.currentValue = newValue;\n        }\n    }\n\n    // Classe para gerenciar grupos de dígitos\n    class OdometerDisplay {\n        // Centraliza a configuração de todos os tipos de odômetros\n        static LIMITS = {\n            'boleto-days': { min: 1, max: 31, wrap: true },\n            'pix-days':    { min: 0, max: 3,  wrap: true },\n            'hours':       { min: 0, max: 23, wrap: true },\n            'minutes':     { min: 0, max: 59, wrap: true }\n        };\n\n        constructor(element, initialValue, type) {\n            this.container = $(element);\n            this.config = OdometerDisplay.LIMITS[type];\n            this.value = Math.max(this.config.min, Math.min(initialValue, this.config.max));\n            this.digits = [];\n            \n            this.wrapper = $('<div class=\"odometer-display\">');\n            this.container.html(this.wrapper);\n            \n            const valueStr = this.value.toString().padStart(2, '0');\n            for (let i = 0; i < valueStr.length; i++) {\n                const digit = new OdometerDigit(valueStr[i]);\n                this.digits.push(digit);\n                this.wrapper.append(digit.element);\n                digit.initializePosition();\n            }\n        }\n\n        // Aceita um flag 'wrapped' para informar os dígitos sobre a \"virada\"\n        setValue(newValue, direction, wrapped = false) {\n            if (newValue === this.value) return;\n            \n            const oldStr = this.value.toString().padStart(2, '0');\n            const newStr = newValue.toString().padStart(2, '0');\n            \n            for (let i = 0; i < this.digits.length; i++) {\n                const oldDigit = parseInt(oldStr[i], 10);\n                const newDigit = parseInt(newStr[i], 10);\n                // Passa o flag 'wrapped' para o dígito individual\n                this.digits[i].setValue(newDigit, direction, wrapped);\n            }\n            \n            this.value = newValue;\n        }\n\n        increment() {\n            let wrapped = false;\n            let newValue = this.value + 1;\n            if (newValue > this.config.max) {\n                newValue = this.config.wrap ? this.config.min : this.config.max;\n                wrapped = true;\n            }\n            this.setValue(newValue, 1, wrapped);\n        }\n\n        decrement() {\n            let wrapped = false;\n            let newValue = this.value - 1;\n            if (newValue < this.config.min) {\n                newValue = this.config.max;\n                wrapped = true;\n            }\n            this.setValue(newValue, -1, wrapped);\n        }\n    }\n\n    // Nossos inputs que serão salvos\n    const modeInput = $('#woocommerce_paghiper_pix_due_date_mode');\n    const valueInput = $('#woocommerce_paghiper_pix_due_date_value');\n    \n    // --- LÓGICA DO TOGGLE ---\n    modeToggle.on('change', function() {\n        const isMinutesMode = $(this).is(':checked');\n        daysSection.toggleClass('active', !isMinutesMode);\n        minutesSection.toggleClass('active', isMinutesMode);\n        modeInput.val(isMinutesMode ? 'minutes' : 'days').trigger('change');\n    }).trigger('change');\n\n    // --- LÓGICA DA SEÇÃO \"DIAS\" (BOLETO) ---\n    const initialDays = paghiper_settings.due_date_mode === 'days' ? parseInt(paghiper_settings.due_date_value, 10) : 3;\n    const daysOdometer = new OdometerDisplay(daysSection.find('.days-display'), initialDays, 'boleto-days');\n\n    daysSection.find('.chevron-control').on('click', function() {\n        const action = $(this).data('action');\n        if (action === 'increment') {\n            daysOdometer.increment();\n        } else {\n            daysOdometer.decrement();\n        }\n        // Atualiza o input hidden correspondente\n        valueInput.val(daysOdometer.value).trigger('change');\n    });\n\n    // --- LÓGICA DO CRONÔMETRO (PIX) ---\n    let chronoOdometers = {};\n\n    // Função para atualizar o valor total em minutos no input hidden\n    function updateTotalMinutes() {\n        const days = chronoOdometers.days.value;\n        const hours = chronoOdometers.hours.value;\n        const minutes = chronoOdometers.minutes.value;\n        const totalMinutes = (days * 24 * 60) + (hours * 60) + minutes;\n        valueInput.val(totalMinutes).trigger('change');\n\n        console.log(`Total minutes updated: ${totalMinutes}`); // Debug log\n    }\n\n    // Inicializa os displays do cronômetro\n    function initChronoDisplays() {\n        let initialValues = { days: 0, hours: 0, minutes: 30 };\n\n        if (paghiper_settings.due_date_mode === 'minutes') {\n            const totalMinutes = parseInt(paghiper_settings.due_date_value, 10);\n            if (!isNaN(totalMinutes) && totalMinutes > 0) {\n                initialValues = {\n                    days: Math.floor(totalMinutes / (24 * 60)),\n                    hours: Math.floor((totalMinutes % (24 * 60)) / 60),\n                    minutes: totalMinutes % 60\n                };\n            }\n        }\n\n        chronoOdometers.days = new OdometerDisplay($('#cron-days'), initialValues.days, 'pix-days');\n        chronoOdometers.hours = new OdometerDisplay($('#cron-hours'), initialValues.hours, 'hours');\n        chronoOdometers.minutes = new OdometerDisplay($('#cron-minutes'), initialValues.minutes, 'minutes');\n        \n        updateTotalMinutes();\n    }\n\n    initChronoDisplays();\n\n    // Manipuladores para os controles do cronômetro (dias, horas, minutos)\n    $('#minutes-mode-section .chevron-control').on('click', function() {\n        const $this = $(this);\n        const unitContainer = $this.closest('.time-unit');\n        const action = $this.data('action');\n        let unit;\n\n        if (unitContainer.find('#cron-days').length) unit = 'days';\n        else if (unitContainer.find('#cron-hours').length) unit = 'hours';\n        else unit = 'minutes';\n\n        // Validação para não passar de 3 dias no modo cronômetro\n        if (unit === 'days' && action === 'increment' && chronoOdometers.days.value === chronoOdometers.days.config.max) {\n            const useDaysInstead = confirm('Configurações de vencimento superiores a 3 dias no modo cronômetro podem usar mais recursos. Deseja converter para o modo \"Dias\" para melhor performance?');\n            \n            if (useDaysInstead) {\n                // Muda para o modo \"dias\" no toggle\n                modeToggle.prop('checked', false).trigger('change');\n\n                // Define o odômetro de dias para 4 e atualiza o input\n                const newValue = 4;\n                daysOdometer.setValue(newValue, 1);\n                valueInput.val(newValue).trigger('change');\n            }\n            // Se o usuário cancelar, simplesmente não incrementa\n            return; \n        }\n\n        // Lógica de incremento/decremento normal\n        if (action === 'increment') {\n            chronoOdometers[unit].increment();\n        } else {\n            chronoOdometers[unit].decrement();\n        }\n        \n        updateTotalMinutes();\n    });\n});"],"names":["$","modeToggle","daysSection","minutesSection","OdometerDigit","initialValue","digitHeight","newValue","direction","wrapped","rotor","_OdometerDisplay","element","type","valueStr","i","digit","oldStr","newStr","newDigit","__publicField","OdometerDisplay","modeInput","valueInput","isMinutesMode","initialDays","daysOdometer","chronoOdometers","updateTotalMinutes","days","hours","minutes","totalMinutes","initChronoDisplays","initialValues","$this","unitContainer","action","unit"],"mappings":"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"}