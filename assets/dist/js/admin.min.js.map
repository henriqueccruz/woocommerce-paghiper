{"version":3,"file":"admin.min.js","sources":["../../src/js/interface/admin.js"],"sourcesContent":["jQuery(function ($) {\n    'use strict';\n\n    // --- ELEMENTOS E INPUTS HIDDEN ---\n    const container = $('#paghiper-due-date-container');\n    if (!container.length) return;\n\n    const modeToggle = $('#due-date-mode-toggle');\n    const daysSection = $('#days-mode-section');\n    const minutesSection = $('#minutes-mode-section');\n\n    // Classe para gerenciar dígitos do odômetro\n    class OdometerDigit {\n        constructor(value, isLast = false) {\n            this.element = $('<div class=\"odometer-digit\">');\n            this.innerElement = $('<div class=\"odometer-digit-inner\">');\n            this.currentValue = parseInt(value, 10);\n            this.isLast = isLast; // último dígito pode rolar infinitamente\n\n            this.element.append(this.innerElement);\n            this.updateDisplay();\n        }\n\n        updateDisplay() {\n            this.innerElement.html(`\n                <span class=\"odometer-digit-value\">${this.currentValue}</span>\n                <span class=\"odometer-digit-value\">${this.getNextValue(1)}</span>\n                <span class=\"odometer-digit-value\">${this.getNextValue(-1)}</span>\n            `);\n        }\n\n        getNextValue(direction) {\n            if (this.isLast) {\n                let next = this.currentValue + direction;\n                if (next > 9) next = 0;\n                if (next < 0) next = 9;\n                return next;\n            }\n            return this.currentValue;\n        }\n\n        setValue(newValue, direction) {\n            if (newValue === this.currentValue) return false;\n\n            const className = direction > 0 ? 'rolling-up' : 'rolling-down';\n            this.element.addClass(className);\n            \n            setTimeout(() => {\n                this.currentValue = newValue;\n                this.updateDisplay();\n                this.element.removeClass(className);\n            }, 200);\n\n            return true;\n        }\n    }\n\n    // Classe para gerenciar grupos de dígitos\n    class OdometerDisplay {\n        constructor(element, initialValue, maxValue = 99) {\n            this.container = $(element);\n            this.maxValue = maxValue;\n            this.value = initialValue;\n            this.digits = [];\n            \n            // Criar wrapper\n            this.wrapper = $('<div class=\"odometer-display\">');\n            this.container.html(this.wrapper);\n            \n            // Criar dígitos\n            const valueStr = this.value.toString().padStart(2, '0');\n            for (let i = 0; i < valueStr.length; i++) {\n                const digit = new OdometerDigit(valueStr[i], i === valueStr.length - 1);\n                this.digits.push(digit);\n                this.wrapper.append(digit.element);\n            }\n        }\n\n        setValue(newValue, animate = true) {\n            if (newValue === this.value) return;\n            \n            // Garantir limites\n            newValue = Math.max(0, Math.min(newValue, this.maxValue));\n            \n            const oldStr = this.value.toString().padStart(2, '0');\n            const newStr = newValue.toString().padStart(2, '0');\n            \n            // Atualizar cada dígito\n            for (let i = 0; i < this.digits.length; i++) {\n                const oldDigit = parseInt(oldStr[i], 10);\n                const newDigit = parseInt(newStr[i], 10);\n                \n                if (oldDigit !== newDigit) {\n                    const direction = newValue > this.value ? 1 : -1;\n                    this.digits[i].setValue(newDigit, direction);\n                }\n            }\n            \n            this.value = newValue;\n        }\n    }\n\n    // Nossos inputs que serão salvos\n    const modeInput = $('#woocommerce_paghiper_pix_due_date_mode');\n    const valueInput = $('#woocommerce_paghiper_pix_due_date_value');\n    \n    // --- LÓGICA DO TOGGLE ---\n    modeToggle.on('change', function() {\n        const isMinutesMode = $(this).is(':checked');\n        daysSection.toggleClass('active', !isMinutesMode);\n        minutesSection.toggleClass('active', isMinutesMode);\n        modeInput.val(isMinutesMode ? 'minutes' : 'days').trigger('change');\n        // Ao trocar, podemos resetar ou converter os valores\n    }).trigger('change');\n\n    // --- LÓGICA DA SEÇÃO \"DIAS\" ---\n    const initialDays = paghiper_settings.due_date_mode === 'days' ? parseInt(paghiper_settings.due_date_value, 10) : 3;\n    const daysOdometer = new OdometerDisplay(daysSection.find('.days-display'), initialDays, 3);\n\n    daysSection.find('.chevron-control').on('click', function() {\n        const direction = $(this).data('action') === 'increment' ? 1 : -1;\n        const newValue = Math.max(1, Math.min(3, daysOdometer.value + direction));\n        \n        if (newValue !== daysOdometer.value) {\n            daysOdometer.setValue(newValue);\n            valueInput.val(newValue).trigger('change');\n        }\n    });\n\n    // --- LÓGICA DA SEÇÃO \"CRONÔMETRO\" ---\n    // (Esta é a parte mais complexa e é um pseudo-código/guia)\n    // Você vai precisar de uma função para converter o total de minutos (salvo no BD) para D/H/M\n    function updateTotalMinutes() {\n        const days = parseInt($('#cron-days').text());\n        const hours = parseInt($('#cron-hours').text());\n        const minutes = parseInt($('#cron-minutes').text());\n        const totalMinutes = (days * 24 * 60) + (hours * 60) + minutes;\n        valueInput.val(totalMinutes).trigger('change');\n    }\n    \n    // Adicionar listeners nos chevrons ou outros controles para o cronômetro\n    // Ex: ao incrementar minutos\n    // let min = parseInt($('#cron-minutes').text());\n    // min++;\n    // if (min > 59) {\n    //   min = 0;\n    //   // Incrementar horas... e assim por diante\n    // }\n    // $('#cron-minutes').text(min);\n    // updateTotalMinutes();\n\n\n    // --- LÓGICA DO CRONÔMETRO ---\n    let chronoOdometers = {\n        days: null,\n        hours: null,\n        minutes: null\n    };\n\n    const chronoLimits = {\n        days: 3,\n        hours: 23,\n        minutes: 59\n    };\n\n    // Inicializa os displays do cronômetro\n    function initChronoDisplays() {\n        let initialValues = { days: 0, hours: 0, minutes: 0 };\n\n        if (paghiper_settings.due_date_mode === 'minutes') {\n            const totalMinutes = parseInt(paghiper_settings.due_date_value, 10);\n            initialValues = {\n                days: Math.floor(totalMinutes / (24 * 60)),\n                hours: Math.floor((totalMinutes % (24 * 60)) / 60),\n                minutes: totalMinutes % 60\n            };\n        }\n\n        chronoOdometers.days = new OdometerDisplay($('#cron-days'), initialValues.days, chronoLimits.days);\n        chronoOdometers.hours = new OdometerDisplay($('#cron-hours'), initialValues.hours, chronoLimits.hours);\n        chronoOdometers.minutes = new OdometerDisplay($('#cron-minutes'), initialValues.minutes, chronoLimits.minutes);\n    }\n\n    initChronoDisplays();\n\n    // Manipuladores para os controles do cronômetro\n    $('.chrono-control').on('click', function() {\n        const unit = $(this).data('unit');\n        const action = $(this).data('action');\n        const direction = action === 'increment' ? 1 : -1;\n        let newValue = chronoOdometers[unit].value + direction;\n\n        // Aplica os limites circulares\n        if (newValue < 0) {\n            newValue = chronoLimits[unit];\n        } else if (newValue > chronoLimits[unit]) {\n            newValue = 0;\n        }\n\n        chronoOdometers[unit].setValue(newValue);\n        updateTotalMinutes();\n    });\n\n\n    // --- VALIDAÇÃO ANTES DE SALVAR ---\n    $('form#mainform').on('submit', function(e) {\n        if (modeInput.val() === 'minutes') {\n            const totalMinutes = parseInt(valueInput.val(), 10);\n            const threeDaysInMinutes = 3 * 24 * 60;\n\n            if (totalMinutes > threeDaysInMinutes) {\n                const useDaysInstead = confirm('Configurações de vencimento superiores a 3 dias no modo cronômetro podem usar mais recursos. Deseja converter para o modo \"Dias\" para melhor performance?');\n                \n                if (useDaysInstead) {\n                    // Prevenir o envio padrão\n                    e.preventDefault();\n                    \n                    // Converter para dias e mudar o modo\n                    const totalDays = Math.ceil(totalMinutes / (24 * 60));\n                    modeInput.val('days');\n                    valueInput.val(totalDays);\n                    \n                    // Enviar o formulário programaticamente após a alteração\n                    // Usar um timeout pequeno pode ajudar a garantir que os valores foram setados\n                    setTimeout(() => $(this).submit(), 100);\n                }\n                // Se o usuário clicar em \"Cancelar\", o formulário envia normalmente.\n            }\n        }\n    });\n});"],"names":[],"mappings":"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"}